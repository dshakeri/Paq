{
  "_args": [
    [
      {
        "raw": "fastfall@^1.5.1",
        "scope": null,
        "escapedName": "fastfall",
        "name": "fastfall",
        "rawSpec": "^1.5.1",
        "spec": ">=1.5.1 <2.0.0",
        "type": "range"
      },
      "/Users/dshakeri/Documents/code/Paq/node_modules/react-native-fbsdk"
    ]
  ],
  "_from": "fastfall@>=1.5.1 <2.0.0",
  "_id": "fastfall@1.5.1",
  "_inCache": true,
  "_location": "/fastfall",
  "_nodeVersion": "4.2.0",
  "_npmUser": {
    "name": "matteo.collina",
    "email": "hello@matteocollina.com"
  },
  "_npmVersion": "3.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fastfall@^1.5.1",
    "scope": null,
    "escapedName": "fastfall",
    "name": "fastfall",
    "rawSpec": "^1.5.1",
    "spec": ">=1.5.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-native-fbsdk"
  ],
  "_resolved": "https://registry.npmjs.org/fastfall/-/fastfall-1.5.1.tgz",
  "_shasum": "3fee03331a49d1d39b3cdf7a5e9cd66f475e7b94",
  "_shrinkwrap": null,
  "_spec": "fastfall@^1.5.1",
  "_where": "/Users/dshakeri/Documents/code/Paq/node_modules/react-native-fbsdk",
  "author": {
    "name": "Matteo Collina",
    "email": "hello@matteocollina.com"
  },
  "bugs": {
    "url": "https://github.com/mcollina/fastfall/issues"
  },
  "dependencies": {
    "reusify": "^1.0.0"
  },
  "description": "call your callbacks in a waterfall, at speed",
  "devDependencies": {
    "async": "^1.0.0",
    "coveralls": "^2.11.6",
    "fastbench": "^1.0.0",
    "faucet": "0.0.1",
    "insync": "^2.1.1",
    "istanbul": "^0.4.1",
    "neo-async": "^1.7.0",
    "pre-commit": "^1.0.10",
    "run-waterfall": "^1.1.1",
    "standard": "^5.0.0",
    "tap-spec": "^4.1.1",
    "tape": "^4.0.0",
    "waterfallize": "^1.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "3fee03331a49d1d39b3cdf7a5e9cd66f475e7b94",
    "tarball": "https://registry.npmjs.org/fastfall/-/fastfall-1.5.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "c3aba5dd8c48dc4333c3cfc5fb859b55d910a1ba",
  "homepage": "https://github.com/mcollina/fastfall#readme",
  "keywords": [
    "async",
    "waterfall",
    "fall",
    "fast",
    "callback"
  ],
  "license": "MIT",
  "main": "fall.js",
  "maintainers": [
    {
      "name": "matteo.collina",
      "email": "hello@matteocollina.com"
    }
  ],
  "name": "fastfall",
  "optionalDependencies": {},
  "precommit": [
    "lint",
    "test"
  ],
  "readme": "# fastfall\n\n[![npm version][npm-badge]][npm-url]\n[![Build Status][travis-badge]][travis-url]\n[![Coverage Status][coveralls-badge]][coveralls-url]\n[![Dependency Status][david-badge]][david-url]\n\n## call your callbacks in a waterfall, without overhead\n\nBenchmark for doing 3 calls `setImmediate` 100 thousands times:\n\n* non-reusable setImmediate: 407ms\n* [async.waterfall](https://github.com/caolan/async#waterfall): 1203ms\n* [run-waterfall](http://npm.im/run-waterfall): 1432ms\n* [insync.wasterfall](https://www.npmjs.com/package/insync#waterfall):\n  1570ms\n* [neo-async.wasterfall](http://suguru03.github.io/neo-async/doc/async.waterfall.html):\n  445ms\n* [waterfallize](http://npm.im/waterfallize): 757ms\n* `fastfall`: 432ms\n* `fastfall` compiled: 428ms\n\n\nThese benchmarks where taken via `bench.js` on node 4.2.2, on a MacBook\nPro Retina 2014 (i7, 16GB of RAM).\n\nIf you need zero-overhead series function call, check out\n[fastseries](http://npm.im/fastseries), for parallel calls check out\n[fastparallel](http://npm.im/fastparallel), and for a fast work queue\nuse [fastq](http://npm.im/fastq).\n\n[![js-standard-style](https://raw.githubusercontent.com/feross/standard/master/badge.png)](https://github.com/feross/standard)\n\n## Install\n\n```\nnpm install fastfall --save\n```\n\n## Usage\n\n```js\nvar fall = require('fastfall')()\n\nfall([\n  function a (cb) {\n    console.log('called a')\n    cb(null, 'a')\n  },\n  function b (a, cb) {\n    console.log('called b with:', a)\n    cb(null, 'a', 'b')\n  },\n  function c (a, b, cb) {\n    console.log('called c with:', a, b)\n    cb(null, 'a', 'b', 'c')\n  }], function result (err, a, b, c) {\n    console.log('result arguments', arguments)\n  })\n```\n\nYou can also set `this` when you create a fall:\n\n```js\nvar that = { hello: 'world' }\nvar fall = require('fastfall')(that)\n\nfall([a, b, c], result)\n\nfunction a (cb) {\n  console.log(this)\n  console.log('called a')\n  cb(null, 'a')\n}\n\nfunction b (a, cb) {\n  console.log('called b with:', a)\n  cb(null, 'a', 'b')\n}\n\nfunction c (a, b, cb) {\n  console.log('called c with:', a, b)\n  cb(null, 'a', 'b', 'c')\n}\n\nfunction result (err, a, b, c) {\n  console.log('result arguments', arguments)\n}\n```\n\nYou can also set `this` when you run a task:\n\n```js\nvar that = { hello: 'world' }\nvar fall = require('fastfall')()\n\nfall(new State('world'), [\n  a, b, c,\n], console.log)\n\nfunction State (value) {\n  this.value = value\n}\n\nfunction a (cb) {\n  console.log(this.value)\n  console.log('called a')\n  cb(null, 'a')\n}\n\nfunction b (a, cb) {\n  console.log('called b with:', a)\n  cb(null, 'a', 'b')\n}\n\nfunction c (a, b, cb) {\n  console.log('called c with:', a, b)\n  cb(null, 'a', 'b', 'c')\n}\n```\n\n### Compile a waterfall\n\n```js\nvar fall = require('fastfall')([\n  function a (arg, cb) {\n    console.log('called a')\n    cb(null, arg)\n  },\n  function b (a, cb) {\n    console.log('called b with:', a)\n    cb(null, 'a', 'b')\n  },\n  function c (a, b, cb) {\n    console.log('called c with:', a, b)\n    cb(null, 'a', 'b', 'c')\n  }])\n\n// a compiled fall supports arguments too!\nfall(42, function result (err, a, b, c) {\n  console.log('result arguments', arguments)\n})\n```\n\nYou can set `this` by doing:\n\n```js\nvar that = { hello: 'world' }\nvar fall = require('fastfall')(that, [\n  function a (arg, cb) {\n    console.log('this is', this)\n    console.log('called a')\n    cb(null, arg)\n  },\n  function b (a, cb) {\n    console.log('called b with:', a)\n    cb(null, 'a', 'b')\n  },\n  function c (a, b, cb) {\n    console.log('called c with:', a, b)\n    cb(null, 'a', 'b', 'c')\n  }])\n\n// a compiled fall supports arguments too!\nfall(42, function result (err, a, b, c) {\n  console.log('result arguments', arguments)\n})\n```\n\nor you can simply attach it to an object:\n\n```js\nvar that = { hello: 'world' }\nthat.doSomething = require('fastfall')([\n  function a (arg, cb) {\n    console.log('this is', this)\n    console.log('called a')\n    cb(null, arg)\n  },\n  function b (a, cb) {\n    console.log('called b with:', a)\n    cb(null, 'a', 'b')\n  },\n  function c (a, b, cb) {\n    console.log('called c with:', a, b)\n    cb(null, 'a', 'b', 'c')\n  }])\n\n// a compiled fall supports arguments too!\nthat.doSomething(42, function result (err, a, b, c) {\n  console.log('this is', this)\n  console.log('result arguments', arguments)\n})\n```\n\n## API\n\n### fastfall([this], [functions])\n\nCreates a `fall`, it can either be pre-filled with a `this` value\nand an array of functions.\n\nIf there is no list of functions, [a not-compiled fall](#not-compiled)\nis returned, if there is a list of function [a compiled fall](#compiled)\nis returned.\n\n<a name=\"not-compiled\"></a>\n### fall([this], functions, [done])\n\nCalls the functions in a waterfall, forwarding the arguments from one to\nanother. Calls `done` when it has finished.\n\n<a name=\"compiled\"></a>\n### fall(args..., [done])\n\nCalls the compiled functions in a waterfall, forwarding the arguments from one to\nanother. Additionally, a user can specify some arguments for the first\nfunction, too. Calls `done` when it has finished.\n\n## License\n\nMIT\n\n\n[npm-badge]: https://badge.fury.io/js/fastfall.svg\n[npm-url]: https://badge.fury.io/js/fastfall\n[travis-badge]: https://api.travis-ci.org/mcollina/fastfall.svg\n[travis-url]: https://travis-ci.org/mcollina/fastfall\n[coveralls-badge]:https://coveralls.io/repos/mcollina/fastfall/badge.svg?branch=master&service=github\n[coveralls-url]: https://coveralls.io/github/mcollina/fastfall?branch=master\n[david-badge]: https://david-dm.org/mcollina/fastfall.svg\n[david-url]: https://david-dm.org/mcollina/fastfall\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mcollina/fastfall.git"
  },
  "scripts": {
    "coverage": "istanbul cover tape test.js | tap-spec",
    "coveralls": "npm run coverage ; cat ./coverage/lcov.info | coveralls",
    "lint": "standard",
    "test": "tape test.js | faucet"
  },
  "version": "1.5.1"
}
